class Tree {
    constructor(object = undefined) {
        this.rootNode = null;

        if (object) {
            this.rootNode = new Node(object);
        }
    }


    get(path) {
        return this.rootNode.get(path);
    }

    set(path, value) {
        this.rootNode.set(path, value);
    }

    add(callback, object) {
        const type = typeof callback;

        if (type === 'string' && callback === 'root') {
            this.rootNode = new Node(object);
            return this;
        } else if (type === 'function') {
            const target = searchNode(this, null, callback);

            if (target && target.add(object)) {
                return this;
            } else {
                console.log('Warning', object);
            }
        }
    }

    contains(criteria) {
        return searchNode(this, null, criteria);
    }

    remove(criteria) {
        const targetNode = this.contains(criteria);

        if (targetNode) {
            return !!targetNode.parent.remove(criteria);
        }

        return false;
    }

    move(search, destination) {
        const targetNode = this.contains(search);

        if (targetNode && this.remove(search)) {
            const destinationNode = this.contains(destination);
            return !!destinationNode.add(targetNode);
        }

        return false;
    }

    traversal(criteria, callback) {
        traversalTree(this, null, criteria, callback);
    }

    sort(compare) {
        this.traversal(null, currentNode => {
            currentNode.sort(compare);
        });
    }

    toJson(options = {}) {
        const optionsDefault = {
            key_children: 'children',
            empty_children: true
        };
        options = Object.assign(optionsDefault, options);
        const result = serializeTree(this, null, [], options);

        if (!options.empty_children) {
            removeEmptyChildren(result, null, options);
        }

        if (result && result.length > 0) {
            return result[0];
        } else {
            return [];
        }
    }

}

const defaultOptions = {
    key_id: 'id',
    key_parent: 'parent',
    key_child: 'child',
    key_last: null,
    uuid: false,
    empty_children: false
}

function sortBy(collection, propertyA, propertyB) {
    return collection.sort(function(a, b) {
        if (a[propertyB] < b[propertyB]) {
            if (a[propertyA] > b[propertyA]) {
                return 1;
            }

            return -1;
        } else {
            if (a[propertyA] < b[propertyA]) {
                return -1;
            }

            return 1;
        }
    });
}
class ListToTree {
    constructor(list, options = {}) {
        const _list = list.map(item => item);

        options = Object.assign({}, defaultOptions, options);
        this.options = options;
        const {
            key_id,
            key_parent,
            uuid
        } = options;

        if (uuid === false) {
            sortBy(_list, key_parent, key_id);
        }

        // Sjymon change 
        const tree = new Tree({
            [key_id]: 0
        });

        _list.forEach((item, index) => {
            tree.add(parentNode => {
                return parentNode.get(key_id) === item[key_parent] || item[key_parent] === null;
            }, item);
        });

        this.tree = tree;
    }

    sort(criteria) {
        this.tree.sort(criteria);
    }

    last(val, key_id, key_last, key_child) {
        for (let n in val) {
            if (val[n][key_child] && val[n][key_child].length) {
                this.last(val[n][key_child], key_id, key_last, key_child);
            }

            if (val[n][key_last] !== 0) {
                if (n - 1 >= 0 && val[n - 1][key_id] !== val[n][key_last] || n - 1 < 0) {
                    const tmp = val.splice(n, 1);

                    val.splice(n + 1, 0, tmp[0]);
                }
            }
        }
    }

    GetTree() {
        const {
            key_id,
            key_child,
            empty_children,
            key_last
        } = this.options;
        let json = this.tree.toJson({
            key_children: key_child,
            empty_children: empty_children
        })[key_child];

        if (key_last) {
            this.last(json, key_id, key_last, key_child);
        }

        return json;
    }

}
